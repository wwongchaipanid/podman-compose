version: '3.9'
services:
  db:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '5432:5432'
    volumes: 
      - db:/var/lib/postgresql/data

  # db-mysql:
  #   image: mysql:5.7
  #   restart: always
  #   environment:
  #     MYSQL_DATABASE: 'database'
  #     MYSQL_USER: 'root'
  #     MYSQL_PASSWORD: 'root'
  #     MYSQL_ROOT_PASSWORD: 'root'
  #   ports:
  #     - '3306:3306'
  #   expose:
  #     - '3306'
  #   volumes:
  #     - db-mysql:/var/lib/mysql/data

  zookeeper:
    image: confluentinc/cp-zookeeper:6.0.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # consul-server:
  #   image: consul:1.9.3
  #   container_name: consul-server1
  #   ports:
  #     - "8500:8500"
  #     - "8600:8600/tcp"
  #     - "8600:8600/udp"

  # mariadb:
  #   image: mariadb:10.5.9
  #   environment:
  #     MYSQL_ROOT_PASSWORD: P@ssw0rd
  #     MYSQL_DATABASE: mfoa
  #     MYSQL_USER: mfoa-admin
  #     MYSQL_PASSWORD: P@ssw0rd    
  #   ports:
  #     - "3306:3306"

  broker:
    image: confluentinc/cp-kafka:6.0.0
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
      - redis
    expose:
      - "29092"
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    healthcheck:
      test: nc -z localhost 29092 || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  redis:
    image: redis
    hostname: redis
    expose:
      - "6379"
    ports:
      - "6379:6379"

  # mongodb:
  #   image : mongo
  #   container_name: mongodb
  #   # environment:
  #   #   - PUID=1000
  #   #   - PGID=1000
  #   ports:
  #     - 27017:27017
  #   restart: unless-stopped
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: example

  # vault:
  #   image : vault:1.7.0
  #   container_name: vault
  #   ports:
  #     - 8200:8200
  #   volumes:
  #     - ../vault/config:/vault/config
  #     - ../vault/policies:/vault/policies
  #     - ../vault/data:/vault/data
  #     - ../vault/logs:/vault/logs
  #   environment:
  #     - VAULT_ADDR=http://127.0.0.1:8200
  #     - VAULT_DEV_ROOT_TOKEN_ID="admin"
  #   command: server -dev -dev-root-token-id="admin"

volumes:
  db:
    driver: local
